

1. vue设置自定义属性： ：加属性名，可设置动态的，比如自定义属性id,且id是动态设置的数组内的属性

    :id = "item.id"

   读取自定义属性： event.target.getAttribute('id')



   vue设置自定义数据， 用data-*

   读取自定义数据： this.$refs.liId.dataset.id

        
<li class="item" :id="item.id" v-for="item in items" :key="item.index" ref="liId"  data-id="wwww"  @click="navTab('$event')">{{item.tabName}}</li>



2.tab切换： 判断数字和自定义的数字是否一致
判断绑定哪个class的写法

:class="[ isActive == 0 ? 'itemActive' : '']" data-num="0"



<li class="item" @click="navTab($event)"  :class="[ isActive == 2 ? 'itemActive' : '']" data-num="2">
    <router-link to="/" :class="[ isActive == 2 ? 'txtActive' : '']">烘焙</router-link>
</li>

      navTab(e){
          let num = e.currentTarget.dataset.num         //获取点击元素的自定义数据
          console.log(e.currentTarget, num)
          this.isActive = num
      }


3.设置动态样式

   :style="{left: left + 'px'}"


4.获取点击元素的自定义数据
 e.currentTarget.dataset.num

 e.currentTarget.offsetLeft        //获取点击元素距离左边距的距离



5.keep-alive 使路由或某个组件不刷新,保存原来的信息

6.$router 和 $route 的区别

$route为当前router跳转对象里面可以获取name、path、query、params等

$router为VueRouter实例，想要导航到不同URL，则使用$router.push方法

返回上一个history也是使用$router.go方法


7.vue-router的两种模式：hash(带#) 和 history（不带#，需要后台配置，要不然刷新时会出现404）


8.动态设置路由：

<route-link :to="path"></route-link>

监听路由的变化：

watch:{
    $route(val){                             //监听路由的变化
      console.log(val)                      //val  ======== this.route       
    }
  }



9. vue-router导航切换 时，如果两个路由都渲染同个组件，组件会重（chong）用,组件的生命周期钩子不会再被调用,使得组件的一些数据无法根据 path的改变得到更新



data () {
    return {
      path:this.$router.currentRoute.path;
    }
}
watch: {
      '$route' (to, from) {
        this.path = this.$router.currentRoute.path 
      }
}



10.为什么要加key？ (https://www.cnblogs.com/zhumingzhenhao/p/7688336.html)

当页面的数据发生变化时，Diff算法只会比较同一层级的节点：

	如果节点类型不同(不一样的标签)，直接干掉前面的节点，再创建并插入新的节点，不会再比较这个节点以后的子节点了。

	如果节点类型相同(一样的标签)，则会重新设置该节点的属性，从而实现节点的更新。


   所以我们需要使用key来给每个节点做一个唯一标识，Diff算法就可以正确的识别此节点，找到正确的位置区插入新的节点

所以一句话，key的作用主要是为了高效的更新虚拟DOM。另外vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了让vue可以区分它们，

否则vue只会替换其内部属性而不会触发过渡效果。


10.24

node服务器和前端服务器域名，接口一样时，都启动的话，接口地址会出现 cannot get /XXX 的错误，解决办法：node的服务器和前端服务器设置不同的域名


10.25

1.header头三件套

header(‘Access-Control-Allow-Origin :’.$origin); //允许的域名（ * 所有域） 
header(‘Access-Control-Allow-Methods : POST’); //允许的方法 
header(‘Access-Control-Allow-Headers : x-requested-with , content-type’); //服务器支持的头信息


2.请求来的数据是异步的，渲染是同步的，所以先判断是不是有数据了，再进行渲染，否则报如下错误

[Vue warn]: Error in render: "TypeError: Cannot read property 'name' of undefined"

解决方法：加上判断条件

<el-row v-if="classification.length > 0">   
    <Classification :classificationName = "classification[0].name" :items = "classification[0].classificationImg"></Classification>
</el-row>



3.Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。
$nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM



4.slot

父组件引用子组件时，一般子组件的开闭标签中间是不加内容的（<Children></Children>），如果加了<Children> <span>替换子组件中对应的slot</span> </Children>）,那么里面的内容元素就会替换子组件中对应的slot，如果没有内容，就会显示子组件中slot的内容


5.v-for不能用于根元素（root element）。因为v-for是个循环，它返回更多的元素。导致无法渲染

  嵌套循环：子循环是父循环数据中的数据‘

 <el-row class="hang" :key="index" v-for="(Pitem, index) in Pitems">

    <router-link tag="li" to="" :key="index" v-for="(item,index) in Pitem.classificationImg"></router-link>

</el-row> 

10.31

在state中定义共享的数据 ----- 在mutations中定义如何修改共享的数据 ----- 在对应的组件的methods中提交 mutations方法并且带上要改的数据（负荷），在合适的位置触发这个方法 ------ 在获取共享数据的组件的computed中获取该数据，在合适的生命周期中，对该数据进行处理，注意共享数据不需要在获取共享数据的data中再初始化


11.1

focus搜索框： 模糊搜索列表显示，最近搜索和流行搜索隐藏       blur时：模糊搜索列表隐藏，最近搜索和流行搜索显示

触发事件focus和blur在header组件，  执行函数和执行函数时所需要的数据在searchCom组件，  header组件和searchCom组件拥有共同的父组件，如何实现？

方法一：共享数据

（1）在header组件中，定义focus和blur的函数，将focus和blur情况下改变的数据，提交到store中；

（2）在searchCom下，从store中响应式获取改变的数据（在computes中获取响应式数据），从而通过该数据控制元素的显示隐藏


方法二： 共享方法

（1）在mutations中定义要执行的方法和数据

（2）在header组件中，commit触发mutations，@focus（@blur）该mutations中的方法

（3）在searchCom组件的computes中响应式获取变化的数据


11.2

header组件：左边标志leftFa，每个标签分开写了

如果公共组件中，某个元素标签上有好多操作，每个父组件的操作都不一样，这个元素可以根据父组件分开写


11.20

骨架屏生成dist:  webpack --config ./webpack.skeleton.conf.js

生成骨架屏： node skeleton



请求的数据的时候加上时间戳或者随机数，避免304错误

status code = 304, 这是因为http请求的缓存问题引起的

前后调用了两个相同的请求，服务器懒得给你重新发一个请求，所以就304咯

 let date=new Date();   let timer=date.getTime().toString();

 this.$http.get('http://10.4.110.19:3000/menuLists?' + timer)    //时间戳



11.22

1. router.js中 菜谱详情 menuDetail路由在三级子路由和在直接路由下边的不同，在三级潜逃路由时，头部header和二级导航，底部导航都存在， 在直接路由下，只有二级导航在； 根据需求，头部和二级导航不应存在

2. path必须和router-link内的to路径对应，即：

        {
            path: "/items/menuDetail",         =====》		<router-link to="/items/menuDetail"></router-link>
            component: menuDetail
        },
  


3. 菜谱列表跳转到菜谱详情： 通过路由传参，获取参数，根据参数获取该菜谱的详情

   vue路由传参有四种基本方式： https://segmentfault.com/a/1190000012393587         https://www.cnblogs.com/shuaifing/p/7911942.html

   注意两种方式：

 	query: 类似于ajax中的get传参，参数会在路径上边显示

	params: 类似于ajax中的post传参， 参数不会在路径上显示

	
query动态传参方式：

  <router-link :to="{ name: 'menuDetail', query: { menuName: menuItem.menuName}}"> </router-link>

  router.js中： 	不需要额外添加参数名称       
		{
            		name: 'menuDetail',
            		path: "/items/menuDetail",         //path必须和router-link内的to路径对应
            		component: menuDetail
        	} 

params动态传参方式：

  <router-link :to="{ name: 'menuDetail', params: { menuName: menuItem.menuName}}"> </router-link>

  router.js中： 	需要额外添加参数名称       
		{
            		name: 'menuDetail',
            		path: "/items/menuDetail/:menuName",        
            		component: menuDetail
        	} 




4. 获取服务端数据请求应放在哪个生命周期？  答：放在created中，如果有dom操作，就放在mounted中，因为模板刚读取完毕


5.Error in nextTick: "RangeError: Maximum call stack size exceeded"

父组件menuDetail 不可以 与子组件 MenuDetail重名， 防止栈溢出， 出现上述错误， 把子组件名字改为MenuDetailCom即可

自认为原理： 由于父组件与子组件重名，子组件发生变化，父组件就编译，这样重复循环，递归运算导致栈溢出


11.23

1.  window.addEventListener('scroll', this.handleScroll, true)      //监听滚动事件，加上第三个参数true，否则监听scroll事件失效


